local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/discoart/FluentPlus/refs/heads/main/Beta.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Zenscript " .. Fluent.Version,
    SubTitle = "zenith",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 420),
    Acrylic = true, -- Blur effect
    Theme = "Rose",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Zenith Menus", Icon = "Play" }),
    Settings = Window:AddTab({ Title = "README/LOGS", Icon = "BookOpenText" }),
    QuickUtil = Window:AddTab({ Title = "Quick Util", Icon = "settings" })
}

-- MAIN TAB

 Toggle1 = Tabs.Main:AddToggle("MainToggle1", {
    Title = "Zen menu", 
    Description = "menu for common hacks",
    Default = false,
    Callback = function(state)
        if state then
            -- Run the hack and store its returned objects/functions for later cleanup
            local Hack = loadstring(game:HttpGet("https://raw.githubusercontent.com/WHOLEBAKERY/Zenscript/main/Zen"))()
            
            -- You may need the hack to provide a way to close its menu or stop effects
            -- For example, if Hack returns a table with a Destroy() or Close() function:
            Toggle1.HackInstance = Hack
            print("Zen menu Activated")
        else
            -- Cancel or clean up the hack
            if Toggle1.HackInstance and type(Toggle1.HackInstance.Destroy) == "function" then
                Toggle1.HackInstance:Destroy()  -- closes menu & cancels effects
            end
            print("Zen menu Deactivated")
        end
    end
})

local player = game:GetService("Players").LocalPlayer
local UserInputService = game:GetService("UserInputService")

local Toggle2 = Tabs.Main:AddToggle("MainToggle2", {
    Title = "Anti Freeze", 
    Description = "unfreeze the player where movement is restricted",
    Default = false,
    Callback = function(state)
        if state then
            -- Create GUI only when toggle is ON
            if not player:FindFirstChild("PlayerGui"):FindFirstChild("FreezeToggleUI") then
                local gui = Instance.new("ScreenGui")
                gui.Name = "FreezeToggleUI"
                gui.ResetOnSpawn = false
                gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                gui.Parent = player:WaitForChild("PlayerGui")

                -- Create the button
                local btn = Instance.new("TextButton")
                btn.Size = UDim2.new(0, 150, 0, 40)
                btn.Position = UDim2.new(0.5, -75, 0.85, 0)
                btn.AnchorPoint = Vector2.new(0.5, 0)
                btn.Text = "Freeze"
                btn.TextColor3 = Color3.new(1, 1, 1)
                btn.Font = Enum.Font.GothamBold
                btn.TextSize = 18
                btn.Active = true
                btn.Draggable = true
                btn.Parent = gui

                -- Add outline
                local stroke = Instance.new("UIStroke", btn)
                stroke.Color = Color3.new(1, 1, 1)
                stroke.Thickness = 2

                -- Track state
                local frozenByButton = false

                local function freeze()
                    local char = player.Character or player.CharacterAdded:Wait()
                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    local root = char:FindFirstChild("HumanoidRootPart")

                    if humanoid then
                        humanoid.WalkSpeed = 0
                        humanoid.JumpPower = 0
                    end

                    if root then
                        root.Anchored = true
                    end

                    UserInputService.ModalEnabled = true
                    frozenByButton = true
                    btn.Text = "Unfreeze"
                    btn.BackgroundColor3 = Color3.fromRGB(255, 80, 80)
                end

                local function unfreeze()
                    local char = player.Character or player.CharacterAdded:Wait()
                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    local root = char:FindFirstChild("HumanoidRootPart")

                    if humanoid then
                        humanoid.WalkSpeed = 16
                        humanoid.JumpPower = 50
                    end

                    if root then
                        root.Anchored = false
                    end

                    -- Remove physical constraints just in case
                    for _, obj in ipairs(char:GetDescendants()) do
                        if obj:IsA("Constraint") or obj:IsA("Weld") then
                            pcall(function() obj:Destroy() end)
                        end
                    end

                    UserInputService.ModalEnabled = false
                    frozenByButton = false
                    btn.Text = "Freeze"
                    btn.BackgroundColor3 = Color3.fromRGB(80, 200, 80)
                end

                -- Toggle freeze/unfreeze
                btn.MouseButton1Click:Connect(function()
                    if frozenByButton then
                        unfreeze()
                    else
                        freeze()
                    end
                end)
            end

        else
            -- Destroy GUI when toggle is OFF
            local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("FreezeToggleUI")
            if gui then
                gui:Destroy()
            end
        end
    end
})


-- Buttons on Main
Tabs.Main:AddButton({
    Title = "Button 1",
    Description = "Very important button",
    Callback = function()
        print("Button 1 clicked!")
    end
})

Tabs.Main:AddButton({
    Title = "Attach tool",
    Description = "Very important button",
    Callback = function()
        print("Attach tool clicked!")
    end
})

Tabs.Main:AddButton({
    Title = "Freeze tool",
    Description = "Very important button",
    Callback = function()
        print("Freeze tool clicked!")
    end
})

Tabs.Main:AddButton({
    Title = "Button 2",
    Description = "Extra button added",
    Callback = function()
        print("Button 2 clicked!")
    end
})

-- QUICK UTIL TAB

-- Quick Util Toggle
local QuickToggle = Tabs.QuickUtil:AddToggle("QuickToggle", {
    Title = "Quick Toggle",
    Description = "Toggle on Quick Util tab",
    Default = false,
    Callback = function(state)
        print(state and "Quick Toggle On" or "Quick Toggle Off")
    end
})

-- Quick Util Button
Tabs.QuickUtil:AddButton({
    Title = "Quick Button",
    Description = "Button on Quick Util tab",
    Callback = function()
        print("Quick Button clicked!")
    end
})

-- MINIMIZER (Custom Icon, no outline, bigger image, positioned higher)
local Minimizer = Fluent:CreateMinimizer({
    Icon = "rbxassetid://120242305941983",
    Size = UDim2.fromOffset(60, 60), -- larger area
    Position = UDim2.new(0, 400, 0, 0), -- moved closer to the top
    Acrylic = false, -- remove acrylic background
    Corner = 20,
    Transparency = 1,
    Draggable = true,
    Visible = true
})

-- Adjust icon to fully cover and extend beyond box
if Minimizer.Icon then
    Minimizer.Icon.Image = "rbxassetid://120242305941983"
    Minimizer.Icon.Size = UDim2.new(1.2, 0, 1.2, 0) -- 120% of minimizer area
    Minimizer.Icon.Position = UDim2.new(-0.1, 0, -0.1, 0) -- re-center oversized icon
    Minimizer.Icon.BackgroundTransparency = 0
    Minimizer.Icon.BorderSizePixel = 0 -- remove outline
    Minimizer.Icon.ScaleType = Enum.ScaleType.Fit -- keep proportions
end

-- Also kill any extra borders on minimizer container
if Minimizer then
    Minimizer.BorderSizePixel = 0
    Minimizer.BackgroundTransparency = 0
end

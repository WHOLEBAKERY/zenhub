-- ZenRed Custom UI (single-file)
-- Features:
--  - Movable window + topbar with your decal icon
--  - Minimize to icon / restore
--  - Close (real) / toggle with K
--  - Attempts to hide/destroy existing Rayfield "Zenscript" window
--  - Home tab with "menus" section, toggles & button
--  - Theme: Zen Red
-- Author: ChatGPT (adapted for KRNL/local use)

-- CONFIG
local DECAL_ID = 89244296158758
local WINDOW_NAME = "Zenscript"  -- used to try and find the old Rayfield window
local TOGGLE_KEY = Enum.KeyCode.K

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Theme (Zen Red)
local Theme = {
    TextColor = Color3.fromRGB(245,245,245),
    Background = Color3.fromRGB(200,80,100),
    Topbar = Color3.fromRGB(180,60,90),
    Shadow = Color3.fromRGB(20,20,20),
    TabBackground = Color3.fromRGB(150,50,70),
    TabBackgroundSelected = Color3.fromRGB(230,100,120),
    TabStroke = Color3.fromRGB(120,40,60),
    ElementBackground = Color3.fromRGB(170,60,80),
    ElementBackgroundHover = Color3.fromRGB(190,80,100),
    Accent = Color3.fromRGB(245,120,140),
    NotificationBackground = Color3.fromRGB(160,50,70)
}

-- Small utility: safe instance creation and property setting
local function new(class, props)
    local obj = Instance.new(class)
    if props then
        for k, v in pairs(props) do
            pcall(function() obj[k] = v end)
        end
    end
    return obj
end

local function clamp(v, a, b) if v < a then return a elseif v > b then return b else return v end end

-- Try to find & hide/destroy old Rayfield GUI (best-effort)
local function tryRemoveOldRayfield(nameOrDecal)
    local pg = LocalPlayer:FindFirstChild("PlayerGui")
    if not pg then return end
    for _, sg in ipairs(pg:GetChildren()) do
        if sg:IsA("ScreenGui") then
            local found = false
            -- check gui name
            if string.find(string.lower(sg.Name or ""), string.lower(tostring(nameOrDecal))) then
                found = true
            else
                -- check descendants for a TextLabel with text matching nameOrDecal
                for _, d in ipairs(sg:GetDescendants()) do
                    if d:IsA("TextLabel") and tostring(d.Text) == tostring(nameOrDecal) then
                        found = true
                        break
                    end
                    if d:IsA("ImageLabel") or d:IsA("ImageButton") then
                        local img = d.Image
                        if img and string.find(img, tostring(nameOrDecal)) then
                            found = true
                            break
                        end
                    end
                end
            end

            if found then
                -- try to disable then destroy
                pcall(function()
                    sg.Enabled = false
                end)
                wait(0.05)
                pcall(function()
                    sg:Destroy()
                end)
            end
        end
    end
end

-- call it twice: once for name, once for decal link
spawn(function()
    tryRemoveOldRayfield(WINDOW_NAME)
    tryRemoveOldRayfield("rbxassetid://" .. tostring(DECAL_ID))
    -- also try common Rayfield identifiers
    tryRemoveOldRayfield("rayfield")
end)

-- Make a stable draggable helper (works well on topbar and whole window)
local function makeDraggable(target)
    local dragging, dragStart, startPos, dragInput
    local cam = workspace.CurrentCamera
    if not cam then return end
    target.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = target.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    target.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            local delta = input.Position - dragStart
            local view = cam.ViewportSize
            target.Position = UDim2.new(
                clamp(startPos.X.Scale + delta.X / view.X, 0, 1 - target.Size.X.Scale),
                startPos.X.Offset + delta.X,
                clamp(startPos.Y.Scale + delta.Y / view.Y, 0, 1 - target.Size.Y.Scale),
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Simple notify (top-right toast)
local function toast(msg, duration)
    duration = duration or 2.5
    local pg = LocalPlayer:FindFirstChild("PlayerGui"); if not pg then return end
    local holder = pg:FindFirstChild("ZenToastHolder")
    if not holder then
        local sg = new("ScreenGui",{Name="ZenToastSG",ResetOnSpawn=false,Parent=pg})
        holder = new("Frame",{Name="ZenToastHolder",Parent=sg,BackgroundTransparency=1,Size=UDim2.new(0,320,0,0),Position=UDim2.new(1,-10,0,10),AnchorPoint=Vector2.new(1,0)})
    end
    local count = 0
    for _,c in ipairs(holder:GetChildren()) do if c:IsA("Frame") then count = count + 1 end end
    local tframe = new("Frame",{Parent=holder,Size=UDim2.new(0,320,0,50),Position=UDim2.new(0,0,0,count*60),BackgroundColor3=Theme.NotificationBackground,BorderSizePixel=0})
    local lbl = new("TextLabel",{Parent=tframe,BackgroundTransparency=1,Size=UDim2.new(1,-12,1,0),Position=UDim2.new(0,6,0,0),Text=msg,TextColor3=Theme.TextColor,Font=Enum.Font.SourceSans,TextSize=18,TextXAlignment=Enum.TextXAlignment.Left,TextWrapped=true})
    spawn(function()
        wait(duration)
        for i=1,20 do
            tframe.BackgroundTransparency = tframe.BackgroundTransparency + 0.05
            lbl.TextTransparency = lbl.TextTransparency + 0.05
            wait(0.02)
        end
        pcall(function() tframe:Destroy() end)
    end)
end

-- Build the UI
local function CreateZenUI()
    local pg = LocalPlayer:WaitForChild("PlayerGui")

    -- Root ScreenGui
    local root = new("ScreenGui", {Name = "ZenRed_UI", Parent = pg, ResetOnSpawn = false})

    -- Shadow frame (for depth)
    local shadow = new("Frame", {Parent = root, Name = "Shadow", Size = UDim2.new(0,520,0,360), Position = UDim2.new(0.5,-260,0.5,-180), BackgroundColor3 = Theme.Shadow, BorderSizePixel = 0})
    shadow.AnchorPoint = Vector2.new(0,0)

    -- Main window
    local window = new("Frame", {Parent = root, Name = "Window", Size = UDim2.new(0,520,0,360), Position = shadow.Position, BackgroundColor3 = Theme.Background, BorderSizePixel = 0})
    window.AnchorPoint = Vector2.new(0,0)

    -- Topbar
    local topbar = new("Frame", {Parent = window, Name="Topbar", Size = UDim2.new(1,0,0,36), BackgroundColor3 = Theme.Topbar, BorderSizePixel = 0})
    local icon = new("ImageLabel", {Parent = topbar, Size = UDim2.new(0,32,0,32), Position = UDim2.new(0,6,0,2), BackgroundTransparency = 1, Image = "rbxassetid://"..tostring(DECAL_ID)})
    local title = new("TextLabel", {Parent = topbar, Size = UDim2.new(1,-140,1,0), Position = UDim2.new(0,46,0,0), BackgroundTransparency = 1, Text = WINDOW_NAME, TextXAlignment = Enum.TextXAlignment.Left, TextColor3 = Theme.TextColor, Font = Enum.Font.SourceSansBold, TextSize = 18})

    -- Minimize (to icon) and Close (real)
    local minBtn = new("TextButton", {Parent = topbar, Size = UDim2.new(0,26,0,26), Position = UDim2.new(1,-70,0,5), Text = "-", Font = Enum.Font.SourceSansBold, TextSize = 20, TextColor3 = Theme.TextColor, BackgroundColor3 = Theme.TabBackground or Theme.TabBackground})
    local closeBtn = new("TextButton", {Parent = topbar, Size = UDim2.new(0,26,0,26), Position = UDim2.new(1,-34,0,5), Text = "X", Font = Enum.Font.SourceSansBold, TextSize = 16, TextColor3 = Theme.TextColor, BackgroundColor3 = Theme.TabBackground or Theme.TabBackground})

    -- Left tabs area
    local tabsPanel = new("Frame", {Parent = window, Name = "Tabs", Size = UDim2.new(0,140,1,-36), Position = UDim2.new(0,0,0,36), BackgroundTransparency = 1})
    local contentPanel = new("Frame", {Parent = window, Name = "Content", Size = UDim2.new(1,-140,1,-36), Position = UDim2.new(0,140,0,36), BackgroundTransparency = 1})

    -- Make draggable
    makeDraggable(topbar)
    makeDraggable(window)

    -- Icon button (minimized-state anchor) - initially hidden
    local miniSG = new("ScreenGui", {Name = "ZenMiniSG", Parent = pg, ResetOnSpawn = false})
    local miniIcon = new("ImageButton", {Parent = miniSG, Name = "ZenMiniIcon", Size = UDim2.new(0,48,0,48), Position = UDim2.new(0,10,0,10), BackgroundTransparency = 0, BackgroundColor3 = Theme.Topbar, Image = "rbxassetid://"..tostring(DECAL_ID)})
    miniSG.Enabled = false
    miniIcon.ImageTransparency = 0
    miniIcon.AutoButtonColor = true

    -- Show/hide helpers
    local function minimizeToIcon()
        root.Enabled = false
        miniSG.Enabled = true
        toast("Minimized to icon", 1.2)
    end
    local function restoreFromIcon()
        root.Enabled = true
        miniSG.Enabled = false
    end

    minBtn.MouseButton1Click:Connect(minimizeToIcon)
    miniIcon.MouseButton1Click:Connect(restoreFromIcon)
    closeBtn.MouseButton1Click:Connect(function()
        -- real close: destroy our GUI and also attempt to remove old Rayfield
        pcall(function() root:Destroy() end)
        pcall(function() miniSG:Destroy() end)
        -- try to also remove Rayfield windows
        tryRemoveOldRayfield(WINDOW_NAME)
        tryRemoveOldRayfield("rbxassetid://" .. tostring(DECAL_ID))
        toast("Zen UI closed", 1.5)
    end)

    -- Toggle key (K) to toggle main UI or icon state
    UserInputService.InputBegan:Connect(function(input, processed)
        if not processed and input.KeyCode == TOGGLE_KEY then
            if root.Enabled then
                minimizeToIcon()
            elseif miniSG.Enabled then
                restoreFromIcon()
            else
                root.Enabled = not root.Enabled
            end
        end
    end)

    -- Tab creation helper
    local tabs = {}
    local function CreateTab(tabName)
        local idx = #tabs + 1
        local btn = new("TextButton", {Parent = tabsPanel, Size = UDim2.new(1,-12,0,40), Position = UDim2.new(0,6,0,(idx-1)*44 + 6), Text = tabName, Font = Enum.Font.SourceSans, TextSize = 16, TextColor3 = Theme.TextColor, BackgroundColor3 = Theme.TabBackground})
        local page = new("Frame", {Parent = contentPanel, Size = UDim2.new(1,-12,1,-12), Position = UDim2.new(0,6,0,6), BackgroundTransparency = 1, Visible = false})
        local tabObj = {Button = btn, Page = page}
        btn.MouseButton1Click:Connect(function()
            for _,t in ipairs(tabs) do
                t.Page.Visible = false
                t.Button.BackgroundColor3 = Theme.TabBackground
            end
            page.Visible = true
            btn.BackgroundColor3 = Theme.TabBackgroundSelected
        end)
        table.insert(tabs, tabObj)
        -- auto-select first tab
        if #tabs == 1 then
            btn:CaptureFocus(); btn.MouseButton1Click()
        end
        return page
    end

    -- Helpers to place elements vertically
    local function nextY(parent)
        local y = 6
        for _,c in ipairs(parent:GetChildren()) do
            if c:IsA("GuiObject") and c.Visible then
                y = y + (c.Size.Y.Offset) + 8
            end
        end
        return y
    end

    -- Element creators for pages
    local function CreateLabel(page, text)
        local lbl = new("TextLabel", {Parent = page, Size = UDim2.new(1,-12,0,22), Position = UDim2.new(0,6,0,nextY(page)), BackgroundTransparency = 1, Text = text or "", TextColor3 = Theme.TextColor, Font = Enum.Font.SourceSans, TextSize = 16, TextXAlignment = Enum.TextXAlignment.Left})
        return lbl
    end
    local function CreateDivider(page)
        local line = new("Frame", {Parent = page, Size = UDim2.new(1,-12,0,2), Position = UDim2.new(0,6,0,nextY(page)), BackgroundColor3 = Theme.TabStroke, BorderSizePixel = 0})
        return line
    end
    local function CreateButton(page, txt, cb)
        local btn = new("TextButton", {Parent = page, Size = UDim2.new(1,-12,0,30), Position = UDim2.new(0,6,0,nextY(page)), Text = txt or "Button", BackgroundColor3 = Theme.ElementBackground, TextColor3 = Theme.TextColor, Font = Enum.Font.SourceSans, TextSize = 16})
        btn.MouseButton1Click:Connect(function() pcall(cb) end)
        return btn
    end
    local function CreateToggle(page, txt, default, cb)
        local container = new("Frame", {Parent = page, Size = UDim2.new(1,-12,0,28), Position = UDim2.new(0,6,0,nextY(page)), BackgroundTransparency = 1})
        local lbl = new("TextLabel", {Parent = container, Size = UDim2.new(1,-60,1,0), Position = UDim2.new(0,0,0,0), BackgroundTransparency = 1, Text = txt or "Toggle", TextColor3 = Theme.TextColor, Font = Enum.Font.SourceSans, TextSize = 16, TextXAlignment = Enum.TextXAlignment.Left})
        local btn = new("TextButton", {Parent = container, Size = UDim2.new(0,46,0,20), Position = UDim2.new(1,-50,0,4), Text = "", AutoButtonColor = false, BackgroundColor3 = default and Theme.Accent or Color3.fromRGB(100,100,100)})
        local state = not not default
        btn.MouseButton1Click:Connect(function()
            state = not state
            btn.BackgroundColor3 = state and Theme.Accent or Color3.fromRGB(100,100,100)
            if cb then pcall(cb, state) end
        end)
        return {
            Get = function() return state end,
            Set = function(v) state = not not v; btn.BackgroundColor3 = state and Theme.Accent or Color3.fromRGB(100,100,100) end,
            UI = container
        }
    end

    -- Build the UI structure (Home tab + "menus" section)
    local homePage = CreateTab("Home")
    CreateLabel(homePage, "menus")
    CreateDivider(homePage)

    -- Unimenu toggle
    local unimenuToggle = CreateToggle(homePage, "Unimenu", false, function(val)
        print("Unimenu toggled:", val)
        toast("Unimenu: " .. tostring(val), 1.2)
        -- put your unimenu logic here
    end)

    -- Attach menu button
    local attachBtn = CreateButton(homePage, "Attach menu", function()
        print("Attach menu button pressed")
        toast("Attached!", 1.2)
        -- put your attach logic here
    end)

    -- Invisible safe zone toggle
    local invisToggle = CreateToggle(homePage, "Invisible safe zone", false, function(val)
        print("Invisible safe zone:", val)
        toast("Safe zone: " .. tostring(val), 1.2)
        -- put your invis logic here
    end)

    -- Return root objects to caller if needed
    return {
        Root = root,
        Window = window,
        Mini = miniSG,
        Toggles = { Unimenu = unimenuToggle, InvisibleSafe = invisToggle },
        Buttons = { Attach = attachBtn }
    }
end

-- Create the UI now
local ui = CreateZenUI()
toast("Zen UI loaded — Press K to toggle/minimize", 2)

-- Expose ui in _G for debugging (optional)
_G.ZenUI = ui

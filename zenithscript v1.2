local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/discoart/FluentPlus/refs/heads/main/Beta.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Zenscript " .. Fluent.Version,
    SubTitle = "zenith",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 420),
    Acrylic = true, -- Blur effect
    Theme = "Rose",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Zenith Menus", Icon = "Play" }),
    Settings = Window:AddTab({ Title = "README/LOGS", Icon = "BookOpenText" }),
    QuickUtil = Window:AddTab({ Title = "Quick Util", Icon = "settings" })
}

-- MAIN TAB

 Toggle1 = Tabs.Main:AddToggle("MainToggle1", {
    Title = "Zen menu", 
    Description = "menu for common hacks",
    Default = false,
    Callback = function(state)
        if state then
            -- Run the hack and store its returned objects/functions for later cleanup
            local Hack = loadstring(game:HttpGet("https://raw.githubusercontent.com/WHOLEBAKERY/Zenscript/main/Zen"))()
            
            -- You may need the hack to provide a way to close its menu or stop effects
            -- For example, if Hack returns a table with a Destroy() or Close() function:
            Toggle1.HackInstance = Hack
            print("Zen menu Activated")
        else
            -- Cancel or clean up the hack
            if Toggle1.HackInstance and type(Toggle1.HackInstance.Destroy) == "function" then
                Toggle1.HackInstance:Destroy()  -- closes menu & cancels effects
            end
            print("Zen menu Deactivated")
        end
    end
})

-- Toggle 2
local Toggle2 = Tabs.Main:AddToggle("MainToggle2", {
    Title = "Toggle 2", 
    Description = "Second toggle on Main tab",
    Default = false,
    Callback = function(state)
        print(state and "Toggle 2 On" or "Toggle 2 Off")
    end
})

-- Buttons on Main
Tabs.Main:AddButton({
    Title = "Button 1",
    Description = "Very important button",
    Callback = function()
        print("Button 1 clicked!")
    end
})

Tabs.Main:AddButton({
    Title = "Attach tool",
    Description = "Very important button",
    Callback = function()
        print("Attach tool clicked!")
    end
})

Tabs.Main:AddButton({
    Title = "Freeze tool",
    Description = "Very important button",
    Callback = function()
        print("Freeze tool clicked!")
    end
})

Tabs.Main:AddButton({
    Title = "Button 2",
    Description = "Extra button added",
    Callback = function()
        print("Button 2 clicked!")
    end
})

-- QUICK UTIL TAB

-- Quick Util Toggle
local QuickToggle = Tabs.QuickUtil:AddToggle("QuickToggle", {
    Title = "Quick Toggle",
    Description = "Toggle on Quick Util tab",
    Default = false,
    Callback = function(state)
        print(state and "Quick Toggle On" or "Quick Toggle Off")
    end
})

-- Quick Util Button
Tabs.QuickUtil:AddButton({
    Title = "Quick Button",
    Description = "Button on Quick Util tab",
    Callback = function()
        print("Quick Button clicked!")
    end
})

-- MINIMIZER (Custom Icon, no outline, bigger image, positioned higher)
local Minimizer = Fluent:CreateMinimizer({
    Icon = "rbxassetid://120242305941983",
    Size = UDim2.fromOffset(60, 60), -- larger area
    Position = UDim2.new(0, 400, 0, 0), -- moved closer to the top
    Acrylic = false, -- remove acrylic background
    Corner = 20,
    Transparency = 1,
    Draggable = true,
    Visible = true
})

-- Adjust icon to fully cover and extend beyond box
if Minimizer.Icon then
    Minimizer.Icon.Image = "rbxassetid://120242305941983"
    Minimizer.Icon.Size = UDim2.new(1.2, 0, 1.2, 0) -- 120% of minimizer area
    Minimizer.Icon.Position = UDim2.new(-0.1, 0, -0.1, 0) -- re-center oversized icon
    Minimizer.Icon.BackgroundTransparency = 0
    Minimizer.Icon.BorderSizePixel = 0 -- remove outline
    Minimizer.Icon.ScaleType = Enum.ScaleType.Fit -- keep proportions
end

-- Also kill any extra borders on minimizer container
if Minimizer then
    Minimizer.BorderSizePixel = 0
    Minimizer.BackgroundTransparency = 0
end

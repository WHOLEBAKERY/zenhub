-- KR4K Demo: Infinite Jump + Noclip
-- Place this LocalScript in StarterPlayerScripts of your OWN test place (Studio or a private game)
-- Warning: Use only in games you own for testing. Don't use in other people's games.

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer

-- Load KR4K safely
local success, Library = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/stysscythe/script/main/LibTest.lua"))()
end)

if not success or not Library then
    warn("Failed to load KR4K library. If you're in Studio enable HTTP or paste the library locally.")
    return
end

local Window = Library.Window("KR4K Demo")
local Tab = Window.CreateTab("Playtests")

-- INF JUMP
local infJumpEnabled = false
local function onJumpRequest()
    local char = player.Character
    if not char then return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid and infJumpEnabled then
        -- Force a jump state on each JumpRequest (works client-side in Studio / local testing)
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

local jumpConn
Tab.CreateToggle("Infinite Jump (TEST ONLY)", function(state)
    infJumpEnabled = state
    print("[KR4K] Infinite Jump:", state and "ON" or "OFF")

    if state then
        -- connect JumpRequest once
        if not jumpConn then
            jumpConn = UserInputService.JumpRequest:Connect(onJumpRequest)
        end
    else
        if jumpConn then
            jumpConn:Disconnect()
            jumpConn = nil
        end
    end
end)

-- NOCLIP
local noclipEnabled = false
-- We'll store previous CanCollide states so we can restore them when turning off
local previousCanCollide = {}

local function setNoclipForCharacter(char, enable)
    if not char then return end
    -- on enable: store existing CanCollide values and set false
    if enable then
        previousCanCollide[char] = {}
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                previousCanCollide[char][part] = part.CanCollide
                part.CanCollide = false
            end
        end
    else
        -- restore stored values (if any)
        local map = previousCanCollide[char]
        if map then
            for part, val in pairs(map) do
                -- make sure part still exists
                if part and part.Parent then
                    pcall(function() part.CanCollide = val end)
                end
            end
            previousCanCollide[char] = nil
        else
            -- fallback: try to set CanCollide = true for all BaseParts
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    pcall(function() part.CanCollide = true end)
                end
            end
        end
    end
end

-- ensure new characters are handled
local function onCharacterAdded(char)
    if noclipEnabled then
        -- small delay for parts to exist
        task.defer(function()
            setNoclipForCharacter(char, true)
        end)
    end
end

player.CharacterAdded:Connect(onCharacterAdded)

-- Keep noclip enforced each frame while enabled (helps if physics resets collisions)
local noclipSteppedConn
Tab.CreateToggle("Noclip (TEST ONLY)", function(state)
    noclipEnabled = state
    print("[KR4K] Noclip:", state and "ON" or "OFF")

    local char = player.Character
    if state then
        if char then setNoclipForCharacter(char, true) end
        -- capture future characters via CharacterAdded already connected above
        if not noclipSteppedConn then
            noclipSteppedConn = RunService.Heartbeat:Connect(function()
                local c = player.Character
                if c then
                    for _, part in ipairs(c:GetDescendants()) do
                        if part:IsA("BasePart") then
                            -- keep CanCollide false while noclip enabled
                            if part.CanCollide ~= false then
                                pcall(function() part.CanCollide = false end)
                            end
                        end
                    end
                end
            end)
        end
    else
        -- disable
        if noclipSteppedConn then
            noclipSteppedConn:Disconnect()
            noclipSteppedConn = nil
        end
        if char then setNoclipForCharacter(char, false) end
    end
end)

-- Optional: quick instructions label
Tab.CreateLabel("Note: This demo is for testing in Studio / your own game only.")

-- LocalScript (StarterGui)

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "KaiUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

-- Blue square (container)
local box = Instance.new("Frame")
box.Name = "BlueBox"
box.Size = UDim2.new(0, 50, 0, 50) -- smaller size
box.Position = UDim2.new(0.1, 0, 0.15, 0)
box.BackgroundColor3 = Color3.fromRGB(37, 99, 235) -- blue
box.BackgroundTransparency = 0.25
box.BorderSizePixel = 0
box.Active = true -- important for input
box.Parent = screenGui

-- Rounded corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 6)
corner.Parent = box

-- The black "Z" text
local zLabel = Instance.new("TextLabel")
zLabel.Name = "ZLabel"
zLabel.Size = UDim2.new(1, 0, 1, 0)
zLabel.Position = UDim2.new(0, 0, 0, 0)
zLabel.BackgroundTransparency = 1
zLabel.Text = "Z"
zLabel.TextColor3 = Color3.fromRGB(0, 0, 0) -- black
zLabel.Font = Enum.Font.SourceSansBold
zLabel.TextScaled = true
zLabel.TextWrapped = true
zLabel.Parent = box

-- === Your KR4K Library Window ===
local success, Library = pcall(function()
	return loadstring(game:HttpGet("https://raw.githubusercontent.com/stysscythe/script/main/LibTest.lua"))()
end)

local kr4kWindow
if success and Library then
	-- Create the KR4K window centered
	kr4kWindow = Library.Window("KR4K Demo")
	-- Optional test tab
	local Tab = kr4kWindow.CreateTab("Playtests")
	Tab.CreateLabel("Hello from KR4K!")

	-- Center the UI (KR4K usually makes its own ScreenGui, so centering depends on that lib)
	-- This trick works if the library exposes ToggleUI:
	Library:ToggleUI(true) -- ensure it's visible at start
end

-- === Z Box Toggle Logic ===
local uiVisible = true
local function toggleKR4K()
	if not kr4kWindow then return end
	uiVisible = not uiVisible
	Library:ToggleUI() -- KR4K has this function built in
end

box.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
			-- Shift + click to drag
		else
			-- Normal click = toggle window
			toggleKR4K()
		end
	end
end)

-- === Dragging logic for the Z box ===
local dragging, dragInput, dragStart, startPos

local function update(input)
	local delta = input.Position - dragStart
	local newPos = UDim2.new(
		startPos.X.Scale,
		startPos.X.Offset + delta.X,
		startPos.Y.Scale,
		startPos.Y.Offset + delta.Y
	)

	-- keep inside screen
	local viewport = workspace.CurrentCamera.ViewportSize
	local x = math.clamp(newPos.X.Offset, 0, viewport.X - box.AbsoluteSize.X)
	local y = math.clamp(newPos.Y.Offset, 0, viewport.Y - box.AbsoluteSize.Y)
	box.Position = UDim2.new(0, x, 0, y)
end

box.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
			-- Begin dragging only if holding Shift
			dragging = true
			dragStart = input.Position
			startPos = box.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end
end)

box.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if dragging and input == dragInput then
		update(input)
	end
end)
